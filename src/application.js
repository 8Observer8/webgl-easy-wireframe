// Generated by CoffeeScript 1.3.3
var Cube, Model, camera, loading, schedule,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

schedule = require('schedule');

loading = require('loading');

camera = require('camera');

Cube = require('webgl/cube');

$('*').each(function() {
  $(this).attr('unselectable', 'on').css({
    '-moz-user-select': 'none',
    '-webkit-user-select': 'none',
    'user-select': 'none',
    '-ms-user-select': 'none'
  });
  return this.onselectstart = function() {
    return false;
  };
});

Model = (function(_super) {

  __extends(Model, _super);

  Model.prototype.attribs = ['position'];

  function Model(gl, data) {
    var buffer, i, _i, _ref, _ref1;
    this.gl = gl;
    Model.__super__.constructor.call(this);
    this.size = data.byteLength / (3 * 4);
    buffer = new Float32Array(this.size * 3 * 2);
    buffer.set(new Float32Array(data), 0);
    for (i = _i = _ref = this.size * 3, _ref1 = this.size * 2 * 3; _i < _ref1; i = _i += 9) {
      buffer[i + 0] = 1;
      buffer[i + 1] = 0;
      buffer[i + 2] = 0;
      buffer[i + 3] = 0;
      buffer[i + 4] = 1;
      buffer[i + 5] = 0;
      buffer[i + 6] = 0;
      buffer[i + 7] = 0;
      buffer[i + 8] = 1;
    }
    this.upload(buffer);
  }

  Model.prototype.setPointersForShader = function(shader) {
    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffer);
    this.setPointer(shader, 'position', 3, 0, 3);
    this.setPointer(shader, 'barycentric', 3, this.size * 3, 3);
    return this;
  };

  return Model;

})(require('webgl/drawable'));

exports.Application = (function() {

  function _Class(canvas) {
    var container, input,
      _this = this;
    this.canvas = canvas;
    this.update = __bind(this.update, this);

    this.resize = __bind(this.resize, this);

    loading.hide();
    this.camera = new camera.Orbit({
      near: 0.001,
      far: 100
    });
    this.transparent = get('transparent.shader');
    this.overlay = get('overlay.shader');
    this.geom = new Model(gl, get('bunny.mesh'));
    $(window).resize(this.resize);
    this.resize();
    schedule.run(this.update);
    gl.enable(gl.DEPTH_TEST);
    container = $('<div></div>').css('margin', 10).appendTo('#ui');
    $('<span>Transparent</span>').appendTo(container);
    input = $('<input type="checkbox">').appendTo(container).change(function() {
      if (input[0].checked) {
        return _this.show_transparent = true;
      } else {
        return _this.show_transparent = false;
      }
    });
  }

  _Class.prototype.resize = function() {
    this.width = this.canvas.width();
    this.height = this.canvas.height();
    this.canvas[0].width = this.width;
    this.canvas[0].height = this.height;
    gl.viewport(0, 0, this.width, this.height);
    return this.camera.aspect(this.width, this.height);
  };

  _Class.prototype.update = function() {
    this.step();
    if (this.show_transparent) {
      return this.drawTransparent();
    } else {
      return this.drawOverlay();
    }
  };

  _Class.prototype.step = function() {
    return this.camera.update();
  };

  _Class.prototype.drawOverlay = function() {
    gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
    gl.disable(gl.BLEND);
    return this.overlay.use().mat4('proj', this.camera.proj).mat4('view', this.camera.view).draw(this.geom);
  };

  _Class.prototype.drawTransparent = function() {
    this.transparent.use().mat4('proj', this.camera.proj).mat4('view', this.camera.view).draw(this.geom);
    gl.enable(gl.SAMPLE_ALPHA_TO_COVERAGE);
    gl.enable(gl.BLEND);
    return gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
  };

  return _Class;

})();
